using System;
using Discord.WebSocket;
using Discord.Commands;
using Discord;
using System.Threading.Tasks;
using System.Reflection;
using PhoenixBot.Modules;
using PhoenixBot.User_Accounts;

namespace PhoenixBot
{
    class CommandHandler
    {
        DiscordSocketClient _client;
        CommandService _service;
        public static IServiceProvider _provider;

        private ulong GuildId_ = Config.bot.guildID;
        private ulong eventChannelID = ChannelIds.channels.eventID;

        public async Task InitializeAsynce(DiscordSocketClient client)
        {
            _client = client;
            _service = new CommandService();
            await _service.AddModulesAsync(Assembly.GetEntryAssembly(), _provider);
            _client.MessageReceived += PreCommandHandle;
            _client.UserJoined += UserJoined;
        }
        public async Task UserJoined(SocketGuildUser user)
        {
            var dataEmbed = new EmbedBuilder();
            dataEmbed.WithTitle("Data Collected and USED")
                .WithDescription("**Data is only collected from Discord!** This means all data used or collected comes from Discord or what is created by the bot itself! **This means health for the minigame, points, warnings and such!** The only thing I collect is the id created for the servers, **THIS IS NOT YOUR LOGIN ID! I REPEAT THIS INFO HAS NOTHING TO DO WITH YOU LOGGING IN TO DISCORD!** This is an ID string that lets servers know who you are generated by Discord. **By using my server you are agreeing to let me use the ulong ID string to help manage the server to keep it from being toxic and having mini-games you can play!");

            var dmChannel = await user.GetOrCreateDMChannelAsync();
            await dmChannel.SendMessageAsync($"{user}, welcome to Digital Phoenix! Please read the Rules channel." +
                $"If you represent a guild please enter `!Diplomat` in the joining channel. Thank you", false, dataEmbed.Build());

        }

        private async Task PreCommandHandle(SocketMessage s)
        {
            var msg = s as SocketUserMessage;
            if (msg == null) return;
            var context = new SocketCommandContext(_client, msg);
            var useraccount = UserAccounts.GetAccount(context.User);
            // Mute check
            if (useraccount.IsMuted)
            {
                if (msg.Content.Contains("!Appeal mute"))
                {

                    var newMsg = msg.Content.TrimStart((char)12);
                    await Appeal((SocketGuildUser)context.User, newMsg, context.Guild);
                }
                await context.Message.DeleteAsync();
                return;
            }
            //FactPost(context.Guild);
            //Leveling Logic
            if (context.User.IsBot) return;
            Leveling.UserSentMessage((SocketGuildUser)context.User, (SocketTextChannel)context.Channel);
            await HandleCommandAsync(msg);

        }
        private async Task HandleCommandAsync(SocketUserMessage msg)
        {
            var context = new SocketCommandContext(_client, msg);
            int argPos = 0;
            if (msg.HasStringPrefix(Config.bot.cmdPrefix, ref argPos)
                || msg.HasMentionPrefix(_client.CurrentUser, ref argPos))
            {
                var result = await _service.ExecuteAsync(context, argPos, _provider);

                if (!result.IsSuccess && result.Error != CommandError.UnknownCommand)
                {
                    await context.Channel.SendMessageAsync(result.ErrorReason);
                }
            }
        }
        private async Task Appeal(SocketGuildUser user, string newMsg, SocketGuild guild)
        {
            var embed = new EmbedBuilder();
            embed.WithTitle("Mute Appeal")
                .WithDescription($"{guild.Owner.Mention}: {user.Mention} is currently muted.")
                .AddField("Appeal Message:", newMsg);
            var dmChannel = await user.GetOrCreateDMChannelAsync();
            var logChannel = Global.Client.GetGuild(Config.bot.guildID).GetTextChannel(ChannelIds.channels.requestID);
            await logChannel.SendMessageAsync($"{user.Mention}", false, embed.Build());
            await dmChannel.SendMessageAsync("Please wait for the Guild Master to review your appeal. Messaging them will not help your case.");
        }
        /*private async Task FactPost(IGuild CurrentGuild)
        {
            string Post = Features.RandomFact.CallRandomFact();
            var embed = new EmbedBuilder();
            var channel = Global.Client.GetGuild(Config.bot.guildID).GetTextChannel(Config.bot.generalID);
            embed.WithTitle("Random Fact for the day")
                .WithDescription(Post);
            await channel.SendMessageAsync("", false, embed);
            return;
        }*/
    }
}
